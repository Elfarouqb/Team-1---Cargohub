name: CargoHub CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: read  # Allows workflow to access the repo code

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Debug directory structure
      - name: List Files
        run: ls -R
        working-directory: .

      # Set up .NET SDK for .NET 8.0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore .NET dependencies
      - name: Restore dependencies
        run: dotnet restore
        working-directory: CargoHubV2/Cargohub V2/Cargohub V2

      # Build the main application
      - name: Build (Main App)
        run: dotnet build --no-restore --configuration Release
        working-directory: CargoHubV2/Cargohub V2/Cargohub V2

      # Initialize CodeQL (v3)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'csharp'

      # Run CodeQL Analysis
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Print CodeQL results to logs instead of uploading
      - name: Display CodeQL Results
        run: cat results.sarif || echo "No CodeQL results found or analysis completed without issues."

  test:
    runs-on: ubuntu-latest
    needs: build  # Runs only if the build job succeeds

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET SDK for testing
      - name: Setup .NET SDK for testing
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore
        working-directory: UnitTests

      # Build the project
      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: UnitTests

      # Run unit tests
      - name: Run unit tests
        run: dotnet test UnitTests/UnitTests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"
        working-directory: UnitTests


  notify:
    runs-on: ubuntu-latest
    needs: test  # ✅ Change from deploy → test
    steps:
      - name: Notify via Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"Tests completed successfully for CargoHub!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
