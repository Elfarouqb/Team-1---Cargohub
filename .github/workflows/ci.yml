name: CargoHub CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Debug directory structure
      - name: List Files
        run: ls -R
        working-directory: .

      # Set up .NET SDK for .NET 8.0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore .NET dependencies for the main app
      - name: Restore dependencies (Main App)
        run: dotnet restore
        working-directory: CargoHubV2/Cargohub V2/Cargohub V2

      # Build the main application
      - name: Build (Main App)
        run: dotnet build --no-restore --configuration Release
        working-directory: CargoHubV2/Cargohub V2/Cargohub V2

      # Static code analysis using GitHub CodeQL
      # Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'csharp'

      # Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # Upload SARIF report for GitHub Security Dashboard
      - name: Upload SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif  # Ensure this matches the generated report path

      # Enforce security check - Fail pipeline if vulnerabilities are found
      - name: Enforce Security Check
        run: |
          if grep -q '"ruleId"' results.sarif; then
            echo "CodeQL detected security issues. Please fix them before merging!";
            exit 1;
          fi




  test:
    runs-on: ubuntu-latest
    needs: build  # Ensures this job runs only after the build job is successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET SDK for testing
      - name: Setup .NET SDK for testing
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore
        working-directory: UnitTests  # Ensure this points to the correct path

      # Build the project
      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: UnitTests  # Ensure this points to the correct path

      # Run unit tests for the UnitTests project
      - name: Run unit tests
        run: |
          dotnet test UnitTests/UnitTests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"
        working-directory: UnitTests  # Ensure this points to the correct path

      # Check code coverage threshold (Optional: enforce a minimum code coverage percentage)
      - name: Check code coverage
        run: |
          COVERAGE=$(dotnet reportgenerator -reports:coverage.cobertura.xml -targetdir:coverage-report)
          if [[ $(echo "$COVERAGE" | grep -oP "Coverage: \K\d+" | head -n 1) -lt 80 ]]; then
            echo "Code coverage is below the minimum threshold of 80%. Please fix the issues.";
            exit 1;
          fi
        working-directory: UnitTests  # Ensure this points to the correct path

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Ensures this job runs only after the test job is successful
    if: success()  # Proceed only if the previous jobs were successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET SDK for deployment (if needed)
      - name: Setup .NET SDK for deployment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Deploy the app (example for production)
      - name: Deploy to Production
        run: ./deploy.sh  # Replace with your actual deployment script

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify via Slack (or other channels)
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment completed successfully for CargoHub!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
