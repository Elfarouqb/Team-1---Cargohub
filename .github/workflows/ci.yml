name: CargoHub CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Debugging: Check folder structure
      - name: Print Working Directory
        run: pwd

      - name: List All Files
        run: ls -R

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Debug
      - name: Find CargohubV2.csproj
        run: find . -name "CargohubV2.csproj"

      # Restore dependencies for the main app
      - name: Restore dependencies (Main App)
        run: dotnet restore
        working-directory: "CargoHubV2/Cargohub V2/Cargohub V2"

      # Clean previous builds
      - name: Clean Solution
        run: dotnet clean
        working-directory: "CargoHubV2/Cargohub V2/Cargohub V2"

      # Build the main application
      - name: Build (Main App)
        run: dotnet build --no-restore --configuration Release
        working-directory: "CargoHubV2/Cargohub V2/Cargohub V2"

  codeql:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up CodeQL
      - name: Set up CodeQL
        uses: github/codeql-action/setup@v2

      # Run CodeQL analysis
      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2

  test:
    runs-on: ubuntu-latest
    needs: codeql  # Run tests after CodeQL completes
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Debugging: Check folder structure
      - name: Print Working Directory
        run: pwd

      - name: List All Files
        run: ls -R

      # Set up .NET SDK for .NET 8.0
      - name: Setup .NET SDK for testing
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Debug
      - name: Find UnitTests.csproj
        run: find . -name "UnitTests.csproj"

      # Restore dependencies for UnitTests
      - name: Restore dependencies
        run: dotnet restore
        working-directory: UnitTests

      # Reference?
      - name: Add project reference (UnitTests -> CargohubV2)
        run: |
          dotnet add UnitTests/UnitTests.csproj reference "CargoHubV2/Cargohub V2/Cargohub V2/CargohubV2.csproj"

      # Clean UnitTests project
      - name: Clean UnitTests project
        run: dotnet clean
        working-directory: UnitTests

      # Build UnitTests project
      - name: Build UnitTests project
        run: dotnet build --no-restore --configuration Release
        working-directory: UnitTests

      # Run unit tests for the UnitTests project
      - name: Run unit tests
        run: |
          dotnet test UnitTests/UnitTests.csproj --configuration Release --no-build --collect:"XPlat Code Coverage"
        working-directory: UnitTests
