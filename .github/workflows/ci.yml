name: CargoHub CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Debug directory structure
      - name: List Files
        run: ls -R
        working-directory: CargoHubV2

      # Set up .NET SDK for .NET 8.0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore .NET dependencies
      - name: Restore dependencies
        run: dotnet restore
        working-directory: CargoHubV2/Cargohub V2/Cargohub V2

      # Build the application
      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: CargoHubV2/Cargohub V2/Cargohub V2




  unit-tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up .NET SDK for .NET 8.0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore dependencies for UnitTests project
      - name: Restore dependencies for UnitTests
        run: dotnet restore Unittests/UnitTests.csproj

      # Build the UnitTests project
      - name: Build UnitTests project
        run: dotnet build --no-restore --configuration Release Unittests/UnitTests.csproj

      # Run tests with Coverlet for coverage
      - name: Run tests and collect coverage
        run: |
          dotnet test --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutput=coverage/ /p:CoverletOutputFormat=cobertura
        working-directory: Unittests

      # Install ReportGenerator (optional, for human-readable reports)
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Generate coverage report (optional)
      - name: Generate coverage report
        run: |
          reportgenerator -reports:coverage/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html
        working-directory: Unittests

      # Enforce coverage threshold
      - name: Check coverage threshold
        id: coverage-check
        run: |
          coverage=$(xmllint --xpath "string(//*[local-name()='coverage']/@line-rate)" Unittests/coverage/coverage.cobertura.xml | awk '{printf("%.0f\n", $1 * 100)}')
          echo "Coverage: $coverage%"
          if [ "$coverage" -lt 70 ]; then
            echo "Code coverage ($coverage%) is below the threshold of 70%."
            exit 1
          fi

      # Upload coverage report (optional)
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: Unittests/coverage-report



  